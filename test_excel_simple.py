#!/usr/bin/env python3
"""
Simple test script to verify Excel skills extraction without Azure dependencies.
"""

import sys
import os
import re
import openpyxl
from collections import Counter

# Test data - subset of skills
tech_skills = [
    'Python', 'JavaScript', 'Java', 'C#', 'TypeScript', 'React', 'Vue.js', 'Angular', 
    'Node.js', 'Express.js', 'Django', 'Flask', 'Spring Boot', 'ASP.NET',
    'PostgreSQL', 'MongoDB', 'MySQL', 'Redis', 'AWS', 'Azure', 'Google Cloud',
    'Docker', 'Kubernetes', 'Jenkins', 'Git', 'GitHub', 'REST API', 'GraphQL',
    'Microservices', 'Agile', 'Scrum', 'Jest', 'Pytest', 'Selenium', 'JUnit'
]

def extract_text_from_excel(file_content, filename):
    """Extract text content from an Excel file (from bytes)."""
    try:
        # Determine file type by extension
        file_extension = filename.lower().split('.')[-1]
        
        # Create a BytesIO object from the file content
        import io
        excel_file = io.BytesIO(file_content)
        
        # Read Excel file based on extension
        if file_extension == 'xlsx':
            # Use openpyxl for .xlsx files
            workbook = openpyxl.load_workbook(excel_file, read_only=True, data_only=True)
            text_content = []
            
            for sheet_name in workbook.sheetnames:
                sheet = workbook[sheet_name]
                for row in sheet.iter_rows(values_only=True):
                    for cell in row:
                        if cell is not None:
                            text_content.append(str(cell))
            
            workbook.close()
        else:
            return ""
        
        # Join all text with spaces and clean up
        text = " ".join(text_content)
        
        # Clean up common Excel extraction issues
        text = re.sub(r'\s+', ' ', text)  # Replace multiple spaces with single space
        text = text.strip()
        
        return text
        
    except Exception as e:
        print(f"Error extracting text from Excel file: {e}")
        return ""

def extract_skills(text):
    """Extract technology skills from text."""
    found_skills = set()
    normalized_text = ' '.join(text.split()).lower()
    
    for skill in tech_skills:
        skill_lower = skill.lower()
        pattern = r'\b' + re.escape(skill_lower) + r'\b'
        if re.search(pattern, normalized_text):
            found_skills.add(skill)
    
    return list(found_skills)

def test_excel_extraction():
    """Test Excel text extraction and skill finding."""
    
    excel_file_path = "/Users/a.abdurihim/Documents/Code/get-skills/test_resume_with_skills.xlsx"
    
    if not os.path.exists(excel_file_path):
        print(f"Error: Test Excel file not found at {excel_file_path}")
        return False
    
    print("Testing Excel Skills Extraction (Standalone)")
    print("=" * 45)
    
    # Read the Excel file
    with open(excel_file_path, 'rb') as f:
        file_content = f.read()
    
    # Test text extraction
    print("1. Testing text extraction...")
    extracted_text = extract_text_from_excel(file_content, "test_resume_with_skills.xlsx")
    
    if extracted_text:
        print(f"‚úÖ Text extraction successful!")
        print(f"Extracted text length: {len(extracted_text)} characters")
        print(f"First 200 characters: {extracted_text[:200]}...")
    else:
        print("‚ùå Text extraction failed!")
        return False
    
    # Test skill extraction
    print("\n2. Testing skill extraction...")
    found_skills = extract_skills(extracted_text)
    
    if found_skills:
        print(f"‚úÖ Skills extraction successful!")
        print(f"Found {len(found_skills)} skills:")
        for skill in sorted(found_skills):
            print(f"  - {skill}")
    else:
        print("‚ùå No skills found!")
        return False
    
    print("\n" + "=" * 45)
    print("‚úÖ Excel extraction test completed successfully!")
    return True

if __name__ == "__main__":
    print("Skills Extractor - Excel Integration Test (Standalone)")
    print("=====================================================\n")
    
    success = test_excel_extraction()
    
    if success:
        print("\nüéâ Excel integration is working correctly!")
        print("\nFeatures verified:")
        print("‚úÖ Excel file reading (.xlsx)")
        print("‚úÖ Text extraction from multiple sheets")
        print("‚úÖ Skills detection in extracted text")
        print("‚úÖ Multiple technology categories supported")
        print("\nYour application now supports both PDF and Excel files!")
    else:
        print("\n‚ùå Test failed. Please check the errors above.")
